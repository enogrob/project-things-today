## Crafted (c) 2013~2016 by ZoatWorks Software LTDA.
## Prepared : Roberto Nogueira
## File     : .todayrc
## Version  : PA08
## Date     : 2016-11-21
## Project  : project-things-today
## Reference: bash
##
## Purpose  : Develop a system in order to help TODAY management directory
##            for projects.

THINGS=$HOME/THINGS_HOME
TODO_DIR=$HOME/.todo
TODOTXT=$HOME/.todo/todo.sh

TODAY_LINK=$HOME/Today
PROJECTS_LINK=$HOME/Projects

AREAS=$THINGS/Areas
PROJECTS=$THINGS/Projects
RESOURCES=$THINGS/Resources
INBOX=$THINGS/Inbox
LOGBOOK=$THINGS/Logbook
SCHEDULED=$THINGS/Scheduled
SOMEDAY=$THINGS/Someday
TODAY=$THINGS/Today

CLOUD=$HOME/Google\ Drive/Things
LOCAL=$HOME/Things

alias tdy='things today'
alias tdyl='things today list'
alias tdyi='things today start'
alias tdye='things today stop'
alias tdyj='things today jump'
alias tdya='things today archive'

alias tdp='things projects'
alias tdpl='things projects list'
alias tdpi='things projects start'
alias tdpe='things projects stop'
alias tdpn='things projects new'
alias tdpj='things projects jump'

alias tda='things areas'
alias tdal='things areas list'
alias tdai='things areas start'
alias tdae='things areas stop'

alias tdl='things logbook'
alias tdll='things logbook list'
alias tdli='things logbook start'
alias tdle='things logbook stop'

alias tdc='things cloud'
alias tdci='things cloud start'
alias tdce='things cloud stop'
alias tdcc='things cloud copy'

alias tdi='things inbox'
alias tdil='things inbox list'

alias tdgit='things git'
alias tdgitinit='things gitinit'

is_Things() {
if [ "$1" == "`readlink $THINGS`" ]
  then
    # 0 = true
    return 0 
  else
    # 1 = false
    return 1
  fi
}

replace_icon(){
    droplet=$1
    icon=$2
    if [[ $icon =~ ^https?:// ]]; then
        curl -sLo /tmp/icon $icon
        icon=/tmp/icon
    fi
    rm -rf $droplet$'/Icon\r'
    sips -i $icon >/dev/null
    DeRez -only icns $icon > /tmp/icns.rsrc
    Rez -append /tmp/icns.rsrc -o $droplet$'/Icon\r'
    SetFile -a C $droplet
    SetFile -a V $droplet$'/Icon\r'
}

function teste10(){
    s1="ebook\|x"
    case $1 in
        $s1) echo "Yes"
        ;;
        *) echo "No"
        ;;
    esac
}

function task_name(){
    shopt -s extglob         
    TAGSPROJECTS='+(ebook|tutorialspoint|sololearn|udemy|project|hackerrank|codewar|tutorial|specialization|job|chrome|coursera)'
    TAGSCONTEXTS='+(java|cpp|ruby|erlang|elixir|javascript|html|css|nodejs|rails|phoenix|bluemix|bash|r|vuejs)'
    
    local TASKNAME=`basename $1`
    local TASKTAGS=(`tag -lN $1 | sed 's/,/ /g'`)
    
    for n in "${TASKTAGS[@]}"
    do
        case $n in
            $TAGSPROJECTS)
                TASKNAME=$TASKNAME" +"$n
                ;;
        esac
    done
    for n in "${TASKTAGS[@]}"
    do
        case $n in
            $TAGSCONTEXTS)
                TASKNAME=$TASKNAME" @"$n
                ;;
        esac
    done    
    echo $TASKNAME
}

function tag_contexts(){
    shopt -s extglob         
    local TAGSCONTEXTS='+(java|cpp|ruby|erlang|elixir|javascript|html|css|nodejs|rails|phoenix|bluemix|bash|r)'
    
    local PROJECTNAME=`basename $1`
    local PROJECTTAGS=(`echo $PROJECTNAME | sed 's/-/ /g'`)
    
    for n in "${PROJECTTAGS[@]}"
    do
        case $n in
            $TAGSCONTEXTS)
            tag -a $n "$1"
            ;;
        esac
    done 
    return 0
}

function things() {
    shopt -s extglob         
    TAGSPROJECTS='+(ebook|tutorialspoint|sololearn|udemy|project|hackerrank|codewar|tutorial|specialization|job|chrome|coursera)'
    
    case $1 in
        areas)
            shift
            case $1 in
                list)
                    tree -L 1 -Cd -l "$AREAS"
                    open -g "$AREAS"
                    ;;

                start)
                    shift
                    if [ $# -eq 1 ]; then
                        PROJECT=`basename "$PWD"`
                        AREA=$1
                    else
                        echo "Error: Bad number of arguments!"
                        return 1
                    fi
                    case $AREA in
                         codewars|course|coursera|catabases|datascience|devops|ebook|iot|job|krishnamurti|phoenix|\
                         rails|ruby|specialization|suspended|tutorial|udemy|webdev|tutorialspoint|sololearn)
                         ;;
                         *)  
                         echo "Error: Bad project type!"
                         return 1
                         ;;
                    esac
                    PROJECTDIR=`find "$PROJECTS" -name $PROJECT`
                    if [ -n "$PROJECTDIR" ]; then
                        if [ ! -L "$AREAS/$AREA/$($TODOTXT -@+ list $PROJECT | head -1)" ]; then 
                            ln -sf "$PWD" "$AREAS/$AREA/$($TODOTXT -@+ list $PROJECT | head -1)"; 
                        fi
                        if [ ! -L "$TODAY/$AREA" ]; then ln -sf "$AREAS/$AREA" "$TODAY/$AREA" ; fi  
                    fi
                    tree -L 1 -Cd -l "$TODAY"
                    open -g "$TODAY" 
                    ;;
                    
                stop)
                    PROJECT=`basename "$PWD"`
                    AREADIR=`find "$AREAS" -name $PROJECT`
                    if [ -n "$AREADIR" ]; then
                       AREADIRNAME=`dirname "$AREADIR"`
                       AREA=`basename "$AREADIRNAME"`
                       if [ -L "$AREAS/$AREA/$($TODOTXT -@+ list $PROJECT | head -1)" ]; then 
                           rm -f "$AREAS/$AREA/$($TODOTXT -@+ list $PROJECT | head -1)"; 
                       fi
                       if [ -L "$TODAY/$AREA" ]; then
                          files=("$AREAS/$AREA/*")
                          if [ ${#files[@]} -lt 2 ]; then rm -f "$TODAY/$AREA"; fi
                       fi 
                    fi
                    cd "$TODAY"
                    tree -L 1 -Cd -l 
                    open -g . 
                    ;;
                    
                *)
                    cd "$AREAS"
                    tree -L 1 -Cd -l 
                    open -g .
                    ;;
            esac
            ;;
            
        projects)
            shift
            case $1 in
                list)
                    tree -L 1 -Cd -l "$PROJECTS"
                    open -g "$PROJECTS"
                    ;;

                start)
                    PROJECT=`basename "$PWD"`
                    PROJECTDIR=`find "$PROJECTS" -name "$PROJECT"`
                    if [ -n "$PROJECTDIR" ]; then
                        if [ ! -e "$TODAY/$($TODOTXT -@+ list $PROJECT | head -1)" ]; then 
                            $TODOTXT -t add $(task_name "$PROJECTS/$PROJECT") #due:$(date +"%Y-%M-%d")
                            #touch "$TODAY/$($TODOTXT -@+ list $PROJECT | head -1)"
                            ln -sf "$PROJECTS/$PROJECT" "$TODAY/$($TODOTXT -@+ list $PROJECT | head -1)"                        
                        fi
                    fi
                    tree -L 1 -Cd -l "$TODAY"
                    $TODOTXT list
                    open -g "$TODAY"
                    ;;
                    
                stop)
                    PROJECT=`basename "$PWD"`
                    PROJECTDIR=`find "$PROJECTS" -name "$PROJECT"`
                    if [ -n "$PROJECTDIR" ]; then
                        AREADIR=`find "$AREAS" -name "$($TODOTXT -@+ list $PROJECT | head -1)"`
                        if [ -n "$AREADIR" ]; then
                           AREADIRNAME=`dirname "$AREADIR"`
                           AREA=`basename "$AREADIRNAME"`
                           if [ -e "$AREAS/$AREA/$($TODOTXT -@+ list $PROJECT | head -1)" ]; then 
                               rm -f "$AREAS/$AREA/$($TODOTXT -@+ list $PROJECT | head -1)"; 
                           fi
                           if [ -e "$TODAY/$AREA" ]; then
                              files=($AREAS/$AREA/*)
                              if [ ${#files[@]} -lt 2 ]; then rm -f "$TODAY/$AREA"; fi
                           fi 
                        fi
                        if [ -L "$TODAY/$($TODOTXT -@+ list $PROJECT | head -1)" ]; then                               
                            rm -f "$TODAY/$($TODOTXT -@+ list $PROJECT | head -1)"   
                            TASK=$($TODOTXT list $PROJECT)
                            $TODOTXT do $TASK
                        fi 

                    fi
                    cd "$TODAY"
                    tree -L 1 -Cd -l 
                    $TODOTXT list
                    open -g . 
                    ;;
                    
                new)
                    shift
                    
                    if [ $# -eq 0 ]; then
                        echo "Error: Bad number of arguments!"
                        return 1
                    elif [ $# -eq 1 ]; then
                        PROJECT=$1
                        PROJECT_TYPE=project
                    elif [ $# -eq 2 ]; then
                        PROJECT=$1
                        PROJECT_TYPE=$2
                        case $PROJECT_TYPE in
                            $TAGSPROJECTS)  
                                ;;
                                *)  
                                echo "Error: Bad project type!"
                                return 1
                                ;;
                        esac                
                    else
                       length=$(($#-1))
                        P1=${@:1:$length}
                        PROJECT_TYPE=${@: -1}
                        P2=`echo $P1 | awk '{print tolower($0)}'`
                        PROJECT=`echo $P2 | sed 's/ /-/g'`                      
                        case $PROJECT_TYPE in
                            $TAGSPROJECTS)    
                                ;;
                            *)  length=$(($#))
                                P1=${@:1:$length}
                                P2=`echo $P1 | awk '{print tolower($0)}'`
                                PROJECT=`echo $P2 | sed 's/ /-/g'` 
                                PROJECT_TYPE=project
                                ;;
                        esac                      
                    fi
                    case $PROJECT_TYPE in
                        $TAGSPROJECTS)  
                            cp -rf "$RESOURCES/project-types/$PROJECT_TYPE" "$PROJECTS/$PROJECT"
                            tag -a $PROJECT_TYPE "$PROJECTS/$PROJECT" 
                            tag_contexts "$PROJECTS/$PROJECT"
                            ;;
                        *)  echo "Error: Bad project type!"
                            return 1
                            ;;
                    esac
                    cd "$PROJECTS/$PROJECT"
                    tree -L 1 -Cd -l 
                    open -g . 
                    tag -l "$PROJECTS/$PROJECT"
                    ;;
                    
                jump)
                    shift
                    if [ $# -eq 0 ]; then
                        cd "$PROJECTS"
                    elif [ $# -eq 1 ]; then
                        cd "$PROJECTS"
                        cd $($TODOTXT list | grep "^$1" | awk {'print $3'})
                    else
                        echo "Error: Bad number of arguments!"
                        return 1                     
                    fi
                    ;;
                    
                *)
                    cd "$PROJECTS"
                    tree -L 1 -Cd -l 
                    open -g .
                    ;;
            esac
            ;;
            
        today)
            shift
            if [ $# -eq 0 ]; then
                cd "$TODAY"
                $TODOTXT list
                open -g .
            else
                case $1 in
                    list)
                        open -g "$TODAY"
                        tree -L 1 -Cd -l "$TODAY"
                        $TODOTXT list
                        ;;
                        
                    start)
                        DAYOFWEEK=`echo $(date +"%a") | awk '{print tolower($0)}'`
                        cd "$PROJECTS"
                        RESULT=(`tag -m $DAYOFWEEK`)
                        for m in "${RESULT[@]}"
                        do 
                          PROJECT="${m}"
                          if [ ! -e "$TODAY/$PROJECT" ]; then 
                              $TODOTXT -t add $(task_name "$PROJECTS/$PROJECT") #due:$(date +"%Y-%M-%d")
                              ln -sf "$PROJECTS/$PROJECT" "$TODAY/$($TODOTXT -@+ list $PROJECT | head -1)"
                          fi
                        done
                        cd "$TODAY"
                        tree -L 1 -Cd -l 
                        $TODOTXT list
                        open -g .                                
                        ;;
                        
                    stop)
                        find "$TODAY" -type l -delete
                        echo "" > $TODO_DIR/todo.txt
                        cd "$TODAY"
                        tree -L 1 -Cd -l 
                        $TODOTXT list
                        open -g .                                
                        ;;
                        
                    jump)
                        cd "$TODAY"
                        tree -L 1 -Cd -l 
                        ;;
                    archive)
                        find "$TODAY" -type l -delete
                        $TODOTXT archive
                        $TODOTXT -p+@ list > $TODAY/TODOLIST.txt
                        while read line; do 
                            PROJECT=`echo $line | awk '{print  $3}'`
                            if [ ! -e "$TODAY/$PROJECT" ]; then 
                                if [ -e "$PROJECTS/$PROJECT" ]; then 
                                    ln -sf "$PROJECTS/$PROJECT" "$TODAY/$line"
                                fi
                            fi
                        done < $TODAY/TODOLIST.txt
                        rm -f $TODAY/TODOLIST.txt
                        cd "$TODAY"
                        tree -L 1 -Cd -l 
                        $TODOTXT list
                        open -g .   
                        ;;
                    
                    *)
                    cd "$PROJECTS"
                    cd $($TODOTXT list | grep "^$1" | awk {'print $3'})
                    open .
                    ;;

                esac
            fi
            ;;
            
        inbox)
            shift
            case $1 in
                list)
                    tree -L 1 -Cd -l "$INBOX"
                    open -g "$INBOX"
                    ;;
                *)
                    cd "$INBOX"
                    tree -L 1 -Cd -l 
                    open -g .
            esac
            ;;
            
        logbook)
            shift
            case $1 in
                list)
                    tree -L 1 -Cd -l "$LOGBOOK"
                    open -g "$LOGBOOK"
                    ;;
                    
                start)
                     PROJECT=`basename "$PWD"`
                     PROJECTDIR=`find "$PROJECTS" -name $PROJECT`
                     if [ -n "$PROJECTDIR" ]; then
                         if [ ! -e "$LOGBOOK/$PROJECT" ]; then ln -sf "$PWD" "$LOGBOOK/$PROJECT"; fi
                     fi
                     tree -L 1 -Cd -l "$LOGBOOK"
                     open -g "$LOGBOOK"
                     ;;
                    
                stop)
                     PROJECT=`basename "$PWD"`
                     PROJECTDIR=`find "$PROJECTS" -name $PROJECT`
                     if [ -n "$PROJECTDIR" ]; then
                         if [ -e "$LOGBOOK/$PROJECT" ]; then rm -f "$LOGBOOK/$PROJECT"; fi
                     fi
                     tree -L 1 -Cd -l "$LOGBOOK"
                     open -g "$LOGBOOK"
                     ;;
                *)
                    cd "$LOGBOOK"
                    tree -L 1 -Cd -l 
                    open -g .
            esac
            ;;
            
        scheduled)
            shift
            case $1 in
                list)
                    tree -L 1 -Cd -l "$SCHEDULED"
                    open -g "$SCHEDULED"
                    ;;
                *)
                    cd "$SCHEDULED"
                    tree -L 1 -Cd -l 
                    open -g .
            esac
            ;;
            
        someday)
            shift
            case $1 in
                list)
                    tree -L 1 -Cd -l "$SOMEDAY"
                    open -g "$SOMEDAY"
                    ;;
                *)
                    cd "$SOMEDAY"
                    tree -L 1 -Cd -l 
                    open -g .
            esac
            ;;        
 
        git)
            shift
            if [ "$#" -gt 0 ]; then
                git add . && \
                git commit -am "$*" && \
                git push origin master && \
                hub browse .
            fi
            ;;
            
        gitinit)
            shift
            git init  && \
            hub create && \ 
            git add . && \
            git commit -am "first commit" && \
            git push origin master && \
            hub browse .
            ;;
            
            
            
        cloud)
            shift
            case $1 in
                start)
                    if is_Things "$CLOUD"; then
                        echo "=> THINGS already to CLOUD!"
                        echo ""
                    else
                        echo "=> Configuring THINGS to CLOUD..."
                        echo ""
                        unlink $TODAY_LINK
                        unlink $PROJECTS_LINK
                        ln -sf "$CLOUD/Today" $TODAY_LINK
                        ln -sf "$CLOUD/Projects" $PROJECTS_LINK
                        unlink $THINGS
                        ln -sf "$CLOUD" $THINGS
                        echo "-- THINGS  :"
                        ls -l $THINGS
                        echo ""
                    fi
                    ;;
                stop)
                    if is_Things $LOCAL; then
                        echo "=> THINGS already to LOCAL!"
                        echo ""
                    else
                        echo "=> Configuring THINGS to LOCAL..."
                        echo ""
                        unlink $TODAY_LINK
                        unlink $PROJECTS_LINK
                        ln -sf "$LOCAL/Today" $TODAY_LINK
                        ln -sf "$LOCAL/Projects" $PROJECTS_LINK                     
                        unlink $THINGS
                        ln -sf "$LOCAL" $THINGS
                        echo "-- THINGS  :"
                        ls -l $THINGS
                        echo ""
                    fi
                    ;;
                copy)
                    PROJECT=`basename $PWD`
                    PROJECTDIR=`find $PROJECTS -name $PROJECT`
                    if [ -n "$PROJECTDIR" ]; then
                        if [ ! -e "$CLOUD/Projects/$PROJECT" ]; then 
                            rsync -avErL $PWD "$CLOUD/Projects"
                        fi
                    fi
                    tree -L 1 -Cd -l "$CLOUD/Projects/$PROJECT"
                    open -g "$CLOUD/Projects/"
                    ;;
                *) 
                    echo "=> Listing TODAY configuration..."
                    echo ""
                    echo "-- THINGS  :"
                    if [ ! -L $THINGS ]; then 
                      echo "THINGS do not exist !"
                      echo ""
                    else  
                      ls -l $THINGS
                      echo ""
                    fi
                    ;;
            esac
            ;;
            
        *)
            if [ ! -L "$THINGS" ]; then
                ln -sf "$LOCAL" $THINGS
                ln -sf "$LOCAL/Today" $TODAY_LINK
                ln -sf "$LOCAL/Projects" $PROJECTS_LINK
            fi
            cd "$THINGS"
            tree -L 1 -Cd -l 
            open -g .
            ;;
    esac
}
