THINGS=$HOME/THINGS_HOME

TODAY_LINK=$HOME/Today
PROJECTS_LINK=$HOME/Projects

AREAS=$THINGS/Areas
PROJECTS=$THINGS/Projects
RESOURCES=$THINGS/Resources/images
INBOX=$THINGS/Inbox
LOGBOOK=$THINGS/Logbook
SCHEDULED=$THINGS/Scheduled
SOMEDAY=$THINGS/Someday
TODAY=$THINGS/Today

CLOUD=$HOME/Google\ Drive/Things
LOCAL=$HOME/Things

alias tdy='things today'
alias tdyl='things today list'

alias tdp='things projects'
alias tdpl='things projects list'
alias tdpi='things projects start'
alias tdpe='things projects stop'
alias tdpn='things projects new'

alias tda='things areas'
alias tdal='things areas list'
alias tdai='things areas start'
alias tdae='things areas stop'

alias tdl='things logbook'
alias tdll='things logbook list'
alias tdli='things logbook start'
alias tdle='things logbook stop'

alias tdc='things cloud'
alias tdci='things cloud start'
alias tdce='things cloud stop'
alias tdcc='things cloud copy'

alias tdi='things inbox'
alias tdil='things inbox list'

alias tdgit='things git'

is_Things() {
if [ "$1" == "`readlink $THINGS`" ]
  then
    # 0 = true
    return 0 
  else
    # 1 = false
    return 1
  fi
}

replace_icon(){
    droplet=$1
    icon=$2
    if [[ $icon =~ ^https?:// ]]; then
        curl -sLo /tmp/icon $icon
        icon=/tmp/icon
    fi
    rm -rf $droplet$'/Icon\r'
    sips -i $icon >/dev/null
    DeRez -only icns $icon > /tmp/icns.rsrc
    Rez -append /tmp/icns.rsrc -o $droplet$'/Icon\r'
    SetFile -a C $droplet
    SetFile -a V $droplet$'/Icon\r'
}

function things() {
    case $1 in
        areas)
            shift
            case $1 in
                list)
                    tree -L 1 -Cd -l $AREAS
                    open -g $AREAS
                    ;;

                start)
                    shift
                    if [ $# -eq 1 ]; then
                        PROJECT=`basename $PWD`
                        AREA=$1
                    else
                        echo "Error: Bad number of arguments!"
                        return 1
                    fi
                    case $AREA in
                         codewars|course|coursera|catabases|datascience|devops|ebook|iot|job|krishnamurti|phoenix|\
                         rails|ruby|specialization|suspended|tutorial|udemy|webdev)
                         ;;
                         *)  
                         echo "Error: Bad project type!"
                         return 1
                         ;;
                    esac
                    PROJECTDIR=`find $PROJECTS -name $PROJECT`
                    if [ -n "$PROJECTDIR" ]; then
                        if [ ! -L "$AREAS/$AREA/$PROJECT" ]; then ln -sf $PWD $AREAS/$AREA/$PROJECT; fi
                        if [ ! -L "$TODAY/$AREA" ]; then ln -sf $AREAS/$AREA $TODAY/$AREA ; fi  
                    fi
                    tree -L 1 -Cd -l $TODAY
                    open -g $TODAY 
                    ;;
                    
                stop)
                    PROJECT=`basename $PWD`
                    AREADIR=`find $AREAS -name $PROJECT`
                    if [ -n "$AREADIR" ]; then
                       AREADIRNAME=`dirname $AREADIR`
                       AREA=`basename $AREADIRNAME`
                       if [ -L "$AREAS/$AREA/$PROJECT" ]; then rm -f $AREAS/$AREA/$PROJECT; fi
                       if [ -L "$TODAY/$AREA" ]; then
                          files=($AREAS/$AREA/*)
                          if [ ${#files[@]} -lt 2 ]; then rm -f $TODAY/$AREA; fi
                       fi 
                    fi
                    cd $TODAY
                    tree -L 1 -Cd -l 
                    open -g . 
                    ;;
                    
                *)
                    cd $AREAS
                    tree -L 1 -Cd -l 
                    open -g .
                    ;;
            esac
            ;;
            
        projects)
            shift
            case $1 in
                list)
                    tree -L 1 -Cd -l $PROJECTS
                    open -g $PROJECTS
                    ;;

                start)
                    PROJECT=`basename $PWD`
                    PROJECTDIR=`find $PROJECTS -name $PROJECT`
                    if [ -n "$PROJECTDIR" ]; then
                        if [ ! -e "$TODAY/$PROJECT" ]; then ln -sf $PWD $TODAY/$PROJECT; fi
                    fi
                    tree -L 1 -Cd -l $TODAY
                    open -g $TODAY
                    ;;
                    
                stop)
                    PROJECT=`basename $PWD`
                    PROJECTDIR=`find $PROJECTS -name $PROJECT`
                    if [ -n "$PROJECTDIR" ]; then
                        AREADIR=`find $AREAS -name $PROJECT`
                        if [ -n "$AREADIR" ]; then
                           AREADIRNAME=`dirname $AREADIR`
                           AREA=`basename $AREADIRNAME`
                           if [ -e "$AREAS/$AREA/$PROJECT" ]; then rm -f $AREAS/$AREA/$PROJECT; fi
                           if [ -e "$TODAY/$AREA" ]; then
                              files=($AREAS/$AREA/*)
                              if [ ${#files[@]} -lt 2 ]; then rm -f $TODAY/$AREA; fi
                           fi 
                        fi
                        if [ -L "$TODAY/$PROJECT" ]; then rm -f $TODAY/$PROJECT; fi  
                    fi
                    cd $TODAY
                    tree -L 1 -Cd -l 
                    open -g . 
                    ;;
                    
                new)
                    shift
                    if [ $# -eq 1 ]; then
                        PROJECT=$1
                        PROJECT_TYPE=project
                    elif [ $# -eq 2 ]; then
                        PROJECT=$1
                        PROJECT_TYPE=$2 #
                    else
                        echo "Error: Bad number of arguments!"
                        return 1
                    fi
                    mkdir -p $PROJECTS/$PROJECT
                    case $PROJECT_TYPE in
                        specialization) 
                            replace_icon $PROJECTS/$PROJECT $RESOURCES/specialization.tiff
                            tag -a specialization $PROJECTS/$PROJECT
                            ;;
                        project)        
                            replace_icon $PROJECTS/$PROJECT $RESOURCES/project.tiff
                            tag -a project $PROJECTS/$PROJECT
                            ;;
                        ebook)
                            replace_icon $PROJECTS/$PROJECT $RESOURCES/project.tiff
                            tag -a ebook $PROJECTS/$PROJECT
                            ;;
                        tutorial)       
                            replace_icon $PROJECTS/$PROJECT $RESOURCES/project.tiff
                            tag -a tutorial $PROJECTS/$PROJECT
                            ;;
                        codewars)
                            replace_icon $PROJECTS/$PROJECT $RESOURCES/project.tiff
                            tag -a codewars $PROJECTS/$PROJECT
                            ;;
                        course)
                            replace_icon $PROJECTS/$PROJECT $RESOURCES/project.tiff
                            tag -a course $PROJECTS/$PROJECT
                            ;;
                        *)  echo "Error: Bad project type!"
                            return 1
                            ;;
                    esac
                    cd $PROJECTS/$PROJECT
                    tree -L 1 -Cd -l 
                    open -g . 
                    tag -l $PROJECTS/$PROJECT
                    ;;
                    
                *)
                    cd $PROJECTS
                    tree -L 1 -Cd -l 
                    open -g .
                    ;;
            esac
            ;;
            
        today)
            shift
            case $1 in
                list)
                    tree -L 1 -Cd -l $TODAY
                    open -g $TODAY
                    ;;
                *)
                    cd $TODAY
                    tree -L 1 -Cd -l 
                    open -g .
            esac
            ;;
            
        inbox)
            shift
            case $1 in
                list)
                    tree -L 1 -Cd -l $INBOX
                    open -g $INBOX
                    ;;
                *)
                    cd $INBOX
                    tree -L 1 -Cd -l 
                    open -g .
            esac
            ;;
            
        logbook)
            shift
            case $1 in
                list)
                    tree -L 1 -Cd -l $LOGBOOK
                    open -g $LOGBOOK
                    ;;
                    
                start)
                     PROJECT=`basename $PWD`
                     PROJECTDIR=`find $PROJECTS -name $PROJECT`
                     if [ -n "$PROJECTDIR" ]; then
                         if [ ! -e "$LOGBOOK/$PROJECT" ]; then ln -sf $PWD $LOGBOOK/$PROJECT; fi
                     fi
                     tree -L 1 -Cd -l $LOGBOOK
                     open -g $LOGBOOK
                     ;;
                    
                stop)
                     PROJECT=`basename $PWD`
                     PROJECTDIR=`find $PROJECTS -name $PROJECT`
                     if [ -n "$PROJECTDIR" ]; then
                         if [ -e "$LOGBOOK/$PROJECT" ]; then rm -f $LOGBOOK/$PROJECT; fi
                     fi
                     tree -L 1 -Cd -l $LOGBOOK
                     open -g $LOGBOOK
                     ;;
                *)
                    cd $LOGBOOK
                    tree -L 1 -Cd -l 
                    open -g .
            esac
            ;;
            
        scheduled)
            shift
            case $1 in
                list)
                    tree -L 1 -Cd -l $SCHEDULED
                    open -g $SCHEDULED
                    ;;
                *)
                    cd $SCHEDULED
                    tree -L 1 -Cd -l 
                    open -g .
            esac
            ;;
            
        someday)
            shift
            case $1 in
                list)
                    tree -L 1 -Cd -l $SOMEDAY
                    open -g $SOMEDAY
                    ;;
                *)
                    cd $SOMEDAY
                    tree -L 1 -Cd -l 
                    open -g .
            esac
            ;;        
 
        git)
            shift
            if [ "$#" -gt 0 ]; then
                git add . && \
                git commit -am "$*" && \
                git push origin master && \
                hub browse .
            fi
            ;;
            
        cloud)
            shift
            case $1 in
                start)
                    if is_Things "$CLOUD"; then
                        echo "=> THINGS already to CLOUD!"
                        echo ""
                    else
                        echo "=> Configuring THINGS to CLOUD..."
                        echo ""
                        unlink $TODAY_LINK
                        unlink $PROJECTS_LINK
                        ln -sf "$CLOUD/Today" $TODAY_LINK
                        ln -sf "$CLOUD/Projects" $PROJECTS_LINK                     
                        unlink $THINGS
                        ln -sf "$CLOUD" $THINGS
                        echo "-- THINGS  :"
                        ls -l $THINGS
                        echo ""
                    fi
                    ;;
                stop)
                    if is_Things $LOCAL; then
                        echo "=> THINGS already to LOCAL!"
                        echo ""
                    else
                        echo "=> Configuring THINGS to LOCAL..."
                        echo ""
                        unlink $TODAY_LINK
                        unlink $PROJECTS_LINK
                        ln -sf "$LOCAL/Today" $TODAY_LINK
                        ln -sf "$LOCAL/Projects" $PROJECTS_LINK                     
                        unlink $THINGS
                        ln -sf "$LOCAL" $THINGS
                        echo "-- THINGS  :"
                        ls -l $THINGS
                        echo ""
                    fi
                    ;;
                copy)
                    PROJECT=`basename $PWD`
                    PROJECTDIR=`find $PROJECTS -name $PROJECT`
                    if [ -n "$PROJECTDIR" ]; then
                        if [ ! -e "$CLOUD/Projects/$PROJECT" ]; then 
                            rsync -avErL $PWD "$CLOUD/Projects"
                        fi
                    fi
                    tree -L 1 -Cd -l "$CLOUD/Projects/$PROJECT"
                    open -g "$CLOUD/Projects/"
                    ;;
                *) 
                    echo "=> Listing TODAY configuration..."
                    echo ""
                    echo "-- THINGS  :"
                    if [ ! -L $THINGS ]; then 
                      echo "THINGS do not exist !"
                      echo ""
                    else  
                      ls -l $THINGS
                      echo ""
                    fi
                    ;;
            esac
            ;;
            
        *)
            if [ ! -L "$THINGS" ]; then
                ln -sf "$LOCAL" $THINGS
                ln -sf "$LOCAL/Today" $TODAY_LINK
                ln -sf "$LOCAL/Projects" $PROJECTS_LINK
            fi
            cd $THINGS
            tree -L 1 -Cd -l 
            open -g .
            ;;
    esac
}
