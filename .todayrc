#!/bin/bash
## Crafted (c) 2013~2016 by ZoatWorks Software LTDA.
## Prepared : Roberto Nogueira
## File     : .todayrc.sh
## Version  : PA33
## Date     : 2016-02-01
## Project  : project-things-today
## Reference: bash
##
## Purpose  : Develop a system in order to help TODAY management directory
##            for projects.

THINGS=$HOME/THINGS_HOME
TODO_DIR=$HOME/.todo
TODOTXT=$HOME/.todo/todo.sh

TODAY_LINK=$HOME/Today
PROJECTS_LINK=$HOME/Projects

AREAS=$THINGS/Areas
PROJECTS=$THINGS/Projects
RESOURCES=$THINGS/Resources
INBOX=$THINGS/Inbox
LOGBOOK=$THINGS/Logbook
SCHEDULED=$THINGS/Scheduled
SOMEDAY=$THINGS/Someday
TODAY=$THINGS/Today

CLOUD=$HOME/Google\ Drive/Things
LOCAL=$HOME/Things
DEBUG=false

alias tdy='things today'
alias tdyl='things today list'
alias tdyi='things today start'
alias tdye='things today stop'
alias tdyia='things today startall'
alias tdyea='things today stopall'
alias tdyj='things today jump'
alias tdya='things today archive'

alias tdp='things projects'
alias tdpl='things projects list'
alias tdpn='things projects new'
alias tdpj='things projects jump'
alias tdph='things projects home'
alias tdphi='things projects home start'

alias tda='things areas'
alias tdal='things areas list'
alias tdai='things areas start'
alias tdae='things areas stop'

alias tdl='things logbook'
alias tdll='things logbook list'
alias tdli='things logbook start'
alias tdle='things logbook stop'

alias tdsd='things someday'
alias tdsdl='things someday list'
alias tdsdi='things someday start'
alias tdsde='things someday stop'

alias tdc='things cloud'
alias tdci='things cloud start'
alias tdce='things cloud stop'
alias tdcc='things cloud copy'

alias tdi='things inbox'
alias tdil='things inbox list'

alias tdg='things git'
alias tdgi='things git start'
alias tdge='things git stop'

alias tds='things scheduled'
alias tdsl='things scheduled list'
alias tdss='things scheduled summary'
alias tdsi='things scheduled start'
alias tdse='things scheduled stop'
alias tdsia='things scheduled startall'
alias tdsea='things scheduled stopall'

alias tdei='exercism configure --dir=$PWD'

mdread(){
    pandoc "$1" -f markdown -t html | lynx -stdin
}

__contains() {
    local n=$#
    local value=${!n}
    for ((i=1;i < $#;i++)) {
        if [ "${!i}" == "${value}" ]; then
            echo "y"
            return 0
        fi
    }
    echo "n"
    return 1
}

__print(){
    if [ $# -eq 0 ]; then
        echo -e ""
    elif [ $# -eq 1 ]; then
        echo -e "\033[1;39m$1 \033[0m"
    elif [ $# -eq 2 ]; then
        case $2 in
            red)
                echo -e "\033[31m$1 \033[0m"
                ;;
            green)
                echo -e "\033[32m$1 \033[0m"
                ;;
            yellow)
                echo -e "\033[33m$1 \033[0m"
                ;;
            blue)
                echo -e "\033[34m$1 \033[0m"
                ;;
            magenta)
                echo -e "\033[35m$1 \033[0m"
                ;;
            cyan)
                echo -e "\033[36m$1 \033[0m"
                ;;
            lightred)
                echo -e "\033[1;91m$1 \033[0m"
                ;;
            lightgreen)
                echo -e "\033[1;92m$1 \033[0m"
                ;;
            lightyellow)
                echo -e "\033[1;93m$1 \033[0m"
                ;;
            lightblue)
                echo -e "\033[1;94m$1 \033[0m"
                ;;
            lightmagenta)
                echo -e "\033[1;95m$1 \033[0m"
                ;;
            lightcyan)
                echo -e "\033[1;96m$1 \033[0m"
                ;;
            *)
                echo -e "\033[1;39m$1 \033[0m"
                ;;
        esac
    else
        __printerr "=> Error: Bad number of arguments."
        __print
        return 1
    fi
}

__printerr(){
    echo -e "\033[31m$1 \033[0m"
}

__is_Things() {
if [ "$1" == "`readlink $THINGS`" ]
  then
    # 0 = true
    return 0
  else
    # 1 = false
    return 1
  fi
}

__replace_icon(){
    droplet=$1
    icon=$2
    if [[ $icon =~ ^https?:// ]]; then
        curl -sLo /tmp/icon $icon
        icon=/tmp/icon
    fi
    rm -rf $droplet$'/Icon\r'
    sips -i $icon >/dev/null
    DeRez -only icns $icon > /tmp/icns.rsrc
    Rez -append /tmp/icns.rsrc -o $droplet$'/Icon\r'
    SetFile -a C $droplet
    SetFile -a V $droplet$'/Icon\r'
}

__task_name(){
    shopt -s extglob
    TAGSPROJECTS='+(ebook|tutorialspoint|sololearn|udemy|project|hackerrank|codewar|tutorial|specialization|job|chrome|coursera|linkedin|futurelearn|exercism|linuxacademy)'
    TAGSCONTEXTS='+(java|cpp|ruby|erlang|elixir|javascript|python|html|css|nodejs|rails|phoenix|bluemix|bash|r|vuejs|elm|devops|sql|unix)'

    local TASKNAME=`basename $1`
    local TASKTAGS=(`tag -lN $1 | sed 's/,/ /g'`)

    for n in "${TASKTAGS[@]}"
    do
        case $n in
            $TAGSPROJECTS)
                TASKNAME=$TASKNAME" +"$n
                ;;
        esac
    done
    for n in "${TASKTAGS[@]}"
    do
        case $n in
            $TAGSCONTEXTS)
                TASKNAME=$TASKNAME" @"$n
                ;;
        esac
    done
    echo $TASKNAME
}

__tag_contexts(){
    shopt -s extglob
    local TAGSCONTEXTS='+(java|cpp|ruby|erlang|elixir|javascript|python|html|css|nodejs|rails|phoenix|bluemix|bash|r|vuejs|elm|devops|sql|unix)'

    local PROJECTNAME=`basename $1`
    local PROJECTTAGS=(`echo $PROJECTNAME | sed 's/-/ /g'`)

    for n in "${PROJECTTAGS[@]}"
    do
        case $n in
            $TAGSCONTEXTS)
            tag -a $n "$1"
            ;;
        esac
    done
    return 0
}

__scheduled(){
    if [ $# -eq 0 ]; then
        local DAYOFWEEK=$(echo $(date +"%a") | awk '{print tolower($0)}')
        pushd . &>/dev/null
        cd "$PROJECTS"
        tag -m scheduled > $PROJECTS/PROJECTS-SCHEDULED.txt
        __print "mon tue wed thu fri sat sun" green
        while read line; do
            local PROJTAGS=(`tag -lN $line | sed 's/,/ /g'`)
            local SCHEDULED=""
            if [ $(__contains "${PROJTAGS[@]}" "mon") == "y" ]; then
                SCHEDULED=" x |";
            else
                SCHEDULED="   |";
            fi
            if [ $(__contains "${PROJTAGS[@]}" "tue") == "y" ]; then
                SCHEDULED=$SCHEDULED" x |";
            else
                SCHEDULED=$SCHEDULED"   |";
            fi
            if [ $(__contains "${PROJTAGS[@]}" "wed") == "y" ]; then
                SCHEDULED=$SCHEDULED" x |";
            else
                SCHEDULED=$SCHEDULED"   |";
            fi
            if [ $(__contains "${PROJTAGS[@]}" "thu") == "y" ]; then
                SCHEDULED=$SCHEDULED" x |";
            else
                SCHEDULED=$SCHEDULED"   |";
            fi
            if [ $(__contains "${PROJTAGS[@]}" "fri") == "y" ]; then
                SCHEDULED=$SCHEDULED" x |";
            else
                SCHEDULED=$SCHEDULED"   |";
            fi
            if [ $(__contains "${PROJTAGS[@]}" "sat") == "y" ]; then
                SCHEDULED=$SCHEDULED" x |";
            else
                SCHEDULED=$SCHEDULED"   |";
            fi
            if [ $(__contains "${PROJTAGS[@]}" "sun") == "y" ]; then
                SCHEDULED=$SCHEDULED" x |";
            else
                SCHEDULED=$SCHEDULED"   |";
            fi
            if [ $(__contains "${PROJTAGS[@]}" $DAYOFWEEK) == "y" ]; then
                __print "$SCHEDULED $line"
            else
                __print "$SCHEDULED $line" cyan
            fi
        done < $PROJECTS/PROJECTS-SCHEDULED.txt
    else
        local DAYOFWEEK=$1
        pushd . &>/dev/null
        cd "$PROJECTS"
        DAYOFWEEK=(`echo $DAYOFWEEK | sed 's/,/ /g'`)

        for m in "${DAYOFWEEK[@]}"
        do
          case $m in
              mon|tue|wed|thu|fri|sat|sun|scheduled)
                  tag -m "${m}" >> $PROJECTS/PROJECTS-SCHEDULED.txt
                  ;;
              *)  tag -m "${m},scheduled" >> $PROJECTS/PROJECTS-SCHEDULED.txt
                  ;;
          esac
        done

        cat $PROJECTS/PROJECTS-SCHEDULED.txt | sort | uniq > $PROJECTS/PROJECTS-SCHEDULED_TEMP.txt
        rm -f $PROJECTS/PROJECTS-SCHEDULED.txt
        mv $PROJECTS/PROJECTS-SCHEDULED_TEMP.txt $PROJECTS/PROJECTS-SCHEDULED.txt

        __print "mon tue wed thu fri sat sun" green
        while read line; do
            local PROJTAGS=(`tag -lN $line | sed 's/,/ /g'`)
            local SCHEDULED=""
            if [ $(__contains "${PROJTAGS[@]}" "mon") == "y" ]; then
                SCHEDULED=" x |";
            else
                SCHEDULED="   |";
            fi
            if [ $(__contains "${PROJTAGS[@]}" "tue") == "y" ]; then
                SCHEDULED=$SCHEDULED" x |";
            else
                SCHEDULED=$SCHEDULED"   |";
            fi
            if [ $(__contains "${PROJTAGS[@]}" "wed") == "y" ]; then
                SCHEDULED=$SCHEDULED" x |";
            else
                SCHEDULED=$SCHEDULED"   |";
            fi
            if [ $(__contains "${PROJTAGS[@]}" "thu") == "y" ]; then
                SCHEDULED=$SCHEDULED" x |";
            else
                SCHEDULED=$SCHEDULED"   |";
            fi
            if [ $(__contains "${PROJTAGS[@]}" "fri") == "y" ]; then
                SCHEDULED=$SCHEDULED" x |";
            else
                SCHEDULED=$SCHEDULED"   |";
            fi
            if [ $(__contains "${PROJTAGS[@]}" "sat") == "y" ]; then
                SCHEDULED=$SCHEDULED" x |";
            else
                SCHEDULED=$SCHEDULED"   |";
            fi
            if [ $(__contains "${PROJTAGS[@]}" "sun") == "y" ]; then
                SCHEDULED=$SCHEDULED" x |";
            else
                SCHEDULED=$SCHEDULED"   |";
            fi
            if [ $(__contains "${PROJTAGS[@]}" $DAYOFWEEK) == "y" ]; then
                __print "$SCHEDULED $line"
            else
                __print "$SCHEDULED $line" cyan
            fi
        done < $PROJECTS/PROJECTS-SCHEDULED.txt
    fi
    rm -f $PROJECTS/PROJECTS-SCHEDULED.txt
    popd &>/dev/null
}
__remove_from_Someday() {
  if [ -e "$SOMEDAY/$PROJECT" ]; then
      tag -r someday "$SOMEDAY/$PROJECT"
      rm -f "$SOMEDAY/$PROJECT";
  fi
}
__remove_from_LogBook() {
  if [ -e "$LOGBOOK/$PROJECT" ]; then
      tag -r logbook "$LOGBOOK/$PROJECT"
      rm -f "$LOGBOOK/$PROJECT";
    fi
}

__remove_from_Scheduled() {
  if [ -e "$SCHEDULED/$PROJECT" ]; then
      rm -f "$SCHEDULED/$PROJECT";
  fi
  DAYOFWEEK=(`tag -lN "$PROJECTS/$PROJECT" | sed 's/,/ /g'`)
  for m in "${DAYOFWEEK[@]}"
  do
    case $m in
      mon|tue|wed|thu|fri|weekday)
          tag -r $m "$PROJECTS/$PROJECT"
          ;;
      sat|sun|weekend)
          tag -r $m "$PROJECTS/$PROJECT"
          ;;
      scheduled)
          tag -r $m "$PROJECTS/$PROJECT"
          ;;
    esac
  done
}

__remove_from_Today(){
if [ -L "$TODAY/$($TODOTXT -@+ list | grep -w "$PROJECT" | head -1)" ]; then
    rm -f "$TODAY/$($TODOTXT -@+ list | grep -w "$PROJECT" | head -1)"
    TASK=$($TODOTXT list $PROJECT)
    TASK=$(echo $TASK | grep -o -E '^[0-9]+')
    $TODOTXT -a do $TASK
fi
}

things() {
    shopt -s extglob
    TAGSPROJECTS='+(ebook|tutorialspoint|sololearn|udemy|project|hackerrank|codewar|tutorial|specialization|job|chrome|coursera|linkedin|futurelearn|exercism|linuxacademy)'

    case $1 in
        areas)
            shift
            case $1 in
                list)
                    tree -L 1 -Cd -l "$AREAS"
                    #open -g "$AREAS"
                    ;;

                start)
                    shift
                    if [ $# -eq 1 ]; then
                        PROJECT=`basename "$PWD"`
                        AREA=$1
                    else
                        __printerr "==> Error: Bad number of arguments."
                        __print
                        return 1
                    fi
                    case $AREA in
                         ebook|tutorialspoint|sololearn|udemy|project|hackerrank|codewar|tutorial|specialization|job|chrome|coursera|linkedin|futurelearn|exercism|linuxacademy)
                         ;;
                         *)
                         __printerr "==> Error: Bad project type."
                         __print
                         return 1
                         ;;
                    esac
                    PROJECTDIR=`find "$PROJECTS" -name $PROJECT`
                    if [ -n "$PROJECTDIR" ]; then
                        if [ ! -L "$AREAS/$AREA/$($TODOTXT -@+ list $PROJECT | head -1)" ]; then
                            ln -sf "$PWD" "$AREAS/$AREA/$($TODOTXT -@+ list $PROJECT | head -1)";
                        fi
                        if [ ! -L "$TODAY/$AREA" ]; then ln -sf "$AREAS/$AREA" "$TODAY/$AREA" ; fi
                    fi
                    #open -g "$TODAY"
                    ;;

                stop)
                    PROJECT=`basename "$PWD"`
                    AREADIR=`find "$AREAS" -name $PROJECT`
                    if [ -n "$AREADIR" ]; then
                       AREADIRNAME=`dirname "$AREADIR"`
                       AREA=`basename "$AREADIRNAME"`
                       if [ -L "$AREAS/$AREA/$($TODOTXT -@+ list $PROJECT | head -1)" ]; then
                           rm -f "$AREAS/$AREA/$($TODOTXT -@+ list $PROJECT | head -1)";
                       fi
                       if [ -L "$TODAY/$AREA" ]; then
                          files=("$AREAS/$AREA/*")
                          if [ ${#files[@]} -lt 2 ]; then rm -f "$TODAY/$AREA"; fi
                       fi
                    fi
                    cd "$TODAY"
                    #open -g .
                    ;;

                *)
                    cd "$AREAS"
                    #open -g .
                    ;;
            esac
            ;;

        projects)
            shift
            case $1 in
                list)
                    shift
                    if [ $# -eq 0 ]; then
                        tree -L 1 -Cd -l "$PROJECTS"
                        #open -g "$PROJECTS"
                    elif [ $# -eq 1 ]; then
                        local PROJTAGS=$1
                        pushd . &>/dev/null
                        cd "$PROJECTS"
                        PROJTAGS=(`echo $PROJTAGS | sed 's/,/ /g'`)

                        for m in "${PROJTAGS[@]}"
                        do
                            tag -m "${m}" >> $PROJECTS/PROJECTS.txt
                        done

                        cat $PROJECTS/PROJECTS.txt | sort | uniq > $PROJECTS/PROJECTS_TEMP.txt
                        rm -f $PROJECTS/PROJECTS.txt
                        mv $PROJECTS/PROJECTS_TEMP.txt $PROJECTS/PROJECTS.txt

                        printf "==> Projects with tag(s): "
                        __print $1 green
                        while read line; do
                                __print $line cyan
                        done < $PROJECTS/PROJECTS.txt
                        rm -f $PROJECTS/PROJECTS.txt
                        popd &>/dev/null
                    else
                        __printerr "==> Error: Bad number of arguments."
                        __print
                        return 1
                    fi
                    ;;

                new)
                    shift

                    if [ $# -eq 0 ]; then
                        __printerr "==> Error: Bad number of arguments."
                        __print
                        return 1
                    elif [ $# -eq 1 ]; then
                        export PROJECT=`echo $1 | awk '{print tolower($0)}'`
                        export PROJECT_TYPE=project
                    else
                       length=$(($#-1))
                        P1=${@:1:$length}
                        export PROJECT_TYPE=${@: -1}
                        P2=`echo $P1 | awk '{print tolower($0)}'`
                        export PROJECT=`echo $P2 | sed 's/ /-/g'`
                        case $PROJECT_TYPE in
                            $TAGSPROJECTS)
                                ;;
                            *)  length=$(($#))
                                P1=${@:1:$length}
                                P2=`echo $P1 | awk '{print tolower($0)}'`
                                PROJECT=`echo $P2 | sed 's/ /-/g'`
                                PROJECT_TYPE=project
                                ;;
                        esac
                    fi
                    case $PROJECT_TYPE in
                        $TAGSPROJECTS)
                            cp -rf "$RESOURCES/project-types/$PROJECT_TYPE" "$PROJECTS/$PROJECT"
                            tag -a $PROJECT_TYPE "$PROJECTS/$PROJECT"
                            __tag_contexts "$PROJECTS/$PROJECT"
                            ;;
                        *)  __printerr "==> Error: Bad project type."
                            __print
                            return 1
                            ;;
                    esac
                    cd "$PROJECTS/$PROJECT"
                    #open -g .
                    tag -l "$PROJECTS/$PROJECT"
                    ;;

                jump)
                    shift
                    if [ $# -eq 0 ]; then
                        cd "$PROJECTS"
                    elif [ $# -eq 1 ]; then
                        if [ -e "$PROJECTS/$1" ]; then
                                cd "$PROJECTS/$1"
                            else
                                __printerr "==> Error: Bad argument $1."
                                __print
                                return 1
                            fi
                    else
                        __printerr "==> Error: Bad number of arguments."
                        __print
                        return 1
                    fi
                    pwd
                    ;;

                home)
                    shift
                    if [ $# -eq 0 ]; then
                        cd "$PROJECTS/$PROJECT"
                    elif [ $# -eq 1 ]; then
                      case $1 in
                        start)
                          export PROJECT=`basename "$PWD"`
                          ;;

                        *)
                          __printerr "==> Error: Bad argument $1."
                          __print
                          return 1
                          ;;
                      esac
                    else
                      __printerr "==> Error: Bad number of arguments."
                      __print
                      return 1
                    fi
                    pwd
                    ;;

                *)
                    cd "$PROJECTS"
                    #open -g .
                    pwd
                    ;;
            esac
            ;;

        today)
            shift
            if [ $# -eq 0 ]; then
                cd "$TODAY"
               #open -g .
                pwd
            elif [ $# -eq 1 ]; then
                case $1 in
                    start)
                        PROJECT=`basename "$PWD"`
                        PROJECTDIR=`find "$PROJECTS" -maxdepth 1 -name "$PROJECT"`
                        if [ -n "$PROJECTDIR" ]; then
                            PROJECTDIR=`find "$TODAY" -maxdepth 1 -lname "$PROJECTS/$PROJECT"`
                            if [ -z "$PROJECTDIR" ]; then
                                $TODOTXT -t add $(__task_name "$PROJECTS/$PROJECT") #due:$(date +"%Y-%M-%d")
                                ln -sf "$PROJECTS/$PROJECT" "$TODAY/$($TODOTXT -@+ list | grep -w "$PROJECT" | head -1)"
                            fi
                        fi
                        tree -L 1 -Cd -l "$TODAY"
                        $TODOTXT list
                        #open -g "$TODAY"
                        ;;

                    stop)
                        PROJECT=`basename "$PWD"`
                        PROJECTDIR=`find "$PROJECTS" -maxdepth 1 -name "$PROJECT"`
                        if [ -n "$PROJECTDIR" ]; then
                            AREADIR=`find "$AREAS" -name "$($TODOTXT -@+ list $PROJECT | head -1)"`
                            if [ -n "$AREADIR" ]; then
                               AREADIRNAME=`dirname "$AREADIR"`
                               AREA=`basename "$AREADIRNAME"`
                               if [ -e "$AREAS/$AREA/$($TODOTXT -@+ list | grep -w "$PROJECT" | head -1)" ]; then
                                   rm -f "$AREAS/$AREA/$($TODOTXT -@+ list | grep -w "$PROJECT" | head -1)";
                               fi
                               if [ -e "$TODAY/$AREA" ]; then
                                  files=($AREAS/$AREA/*)
                                  if [ ${#files[@]} -lt 2 ]; then rm -f "$TODAY/$AREA"; fi
                               fi
                            fi
                            if [ -L "$TODAY/$($TODOTXT -@+ list | grep -w "$PROJECT" | head -1)" ]; then
                                rm -f "$TODAY/$($TODOTXT -@+ list | grep -w "$PROJECT" | head -1)"
                                TASK=$($TODOTXT list $PROJECT)
                                TASK=$(echo $TASK | grep -o -E '^[0-9]+')
                                $TODOTXT -a do $TASK
                            fi

                        fi
                        cd "$TODAY"
                        $TODOTXT list
                        #open -g .
                        ;;

                    startall)
                        DAYOFWEEK=`echo $(date +"%a") | awk '{print tolower($0)}'`
                        cd "$PROJECTS"
                        RESULT=(`tag -m $DAYOFWEEK`)
                        for m in "${RESULT[@]}"
                        do
                          PROJECT="${m}"
                          if [ ! -e "$TODAY/$PROJECT" ]; then
                              $TODOTXT -t add $(__task_name "$PROJECTS/$PROJECT") #due:$(date +"%Y-%M-%d")
                              ln -sf "$PROJECTS/$PROJECT" "$TODAY/$($TODOTXT -@+ list | grep -w "$PROJECT" | head -1)"
                          fi
                        done
                        cd "$TODAY"
                        $TODOTXT list
                        #open -g .
                        ;;

                    stopall)
                        find "$TODAY" -type l -delete
                        > $TODO_DIR/todo.txt
                        cd "$TODAY"
                        $TODOTXT list
                        #open -g .
                        ;;

                    list)
                        #open -g "$TODAY"
                        tree -L 1 -Cd -l "$TODAY"
                        pwd
                        $TODOTXT list
                        ;;

                    jump)
                        cd "$TODAY"
                        pwd
                        ;;

                    archive)
                        find "$TODAY" -type l -delete
                        $TODOTXT archive
                        $TODOTXT -p+@ list > $TODAY/TODOLIST.txt
                        while read line; do
                            PROJECT=`echo $line | awk '{print  $3}'`
                            if [ ! -e "$TODAY/$PROJECT" ]; then
                                if [ -e "$PROJECTS/$PROJECT" ]; then
                                    ln -sf "$PROJECTS/$PROJECT" "$TODAY/$line"
                                fi
                            fi
                        done < $TODAY/TODOLIST.txt
                        rm -f $TODAY/TODOLIST.txt
                        cd "$TODAY"
                        $TODOTXT list
                        #open -g .
                        ;;
                esac
            elif [ $# -eq 2 ]; then
                case $1 in
                    jump)
                        shift
                        re='^[0-9]+$'
                        if [[ $1 =~ $re ]] ; then
                            cd "$PROJECTS"
                            cd $($TODOTXT list | grep "^$1" | awk {'print $3'})
                            pwd
                        else
                            __printerr "==> Error: Bad argument $1."
                            __print
                            return 1
                        fi
                        ;;
                esac
            else
                __printerr "==> Error: Bad number of arguments."
                __print
                return 1
            fi
            ;;

        inbox)
            shift
            case $1 in
                list)
                    tree -L 1 -Cd -l "$INBOX"
                    #open -g "$INBOX"
                    ;;
                *)
                    cd "$INBOX"
                    #open -g .
            esac
            ;;

        logbook)
            shift
            case $1 in
                list)
                    tree -L 1 -Cd -l "$LOGBOOK"
                    pwd
                    #open -g "$LOGBOOK"
                    ;;

                start)
                    shift
                    if [ $# -eq 0 ]; then
                        PROJECT=`basename "$PWD"`
                    elif [ $# -eq 1 ]; then
                        PROJECT=$1
                    else
                        __printerr "==> Error: Bad number of arguments."
                        __print
                        return 1
                    fi
                    PROJECTDIR=`find "$PROJECTS" -maxdepth 1 -name $PROJECT`
                    if [ -n "$PROJECTDIR" ]; then
                        if [ ! -e "$LOGBOOK/$PROJECT" ]; then
                            ln -sf "$PWD" "$LOGBOOK/$PROJECT";
                            tag -a logbook "$LOGBOOK/$PROJECT"
                        fi
                        __remove_from_Scheduled
                        __remove_from_Someday
                        __remove_from_Today
                    else
                        __printerr "==> Error: Bad argument $PROJECT."
                        __print
                        return 1
                    fi
                    #open -g "$LOGBOOK"
                    ;;

                stop)
                    shift
                    if [ $# -eq 0 ]; then
                        PROJECT=`basename "$PWD"`
                    elif [ $# -eq 1 ]; then
                        PROJECT=$1
                    else
                        __printerr "==> Error: Bad number of arguments."
                        __print
                        return 1
                    fi
                    PROJECTDIR=`find "$PROJECTS" -maxdepth 1 -name $PROJECT`
                    if [ -n "$PROJECTDIR" ]; then
                        __remove_from_LogBook
                    else
                        __printerr "==> Error: Bad argument $PROJECT."
                        __print
                        return 1
                    fi
                    #open -g "$LOGBOOK"
                    ;;

                *)
                    cd "$LOGBOOK"
                    pwd
                    #open -g .
            esac
            ;;

        scheduled)
            shift
            case $1 in
                list)
                    tree -L 1 -Cd -l "$SCHEDULED"
                    #open -g "$SCHEDULED"
                    ;;

                summary)
                    shift
                    if [ $# -eq 0 ]; then
                        __scheduled
                    elif [ $# -eq 1 ]; then
                        __scheduled $1
                    else
                        __printerr "==> Error: Bad number of arguments."
                        __print
                        return 1
                    fi
                    ;;

                start)
                    shift
                    if [ $# -eq 0 ]; then
                        PROJECT=`basename "$PWD"`
                        DAYOFWEEK=(`echo $(date +"%a") | awk '{print tolower($0)}'`)
                    elif [ $# -eq 1 ]; then
                        PROJECTDIR=`find "$PROJECTS" -maxdepth 1 -name $1`
                        if [ -n "$PROJECTDIR" ]; then
                            PROJECT=$1
                            DAYOFWEEK=(`echo $(date +"%a") | awk '{print tolower($0)}'`)
                        else
                            PROJECT=`basename "$PWD"`
                            DAYOFWEEK=(`echo $1 | sed 's/,/ /g'`)
                        fi
                    elif [ $# -eq 2 ]; then
                        PROJECT=$2
                        DAYOFWEEK=(`echo $1 | sed 's/,/ /g'`)
                    else
                        __printerr "==> Error: Bad number of arguments."
                        __print
                        return 1
                    fi
                    PROJECTDIR=`find "$PROJECTS" -maxdepth 1 -name $PROJECT`
                    if [ -n "$PROJECTDIR" ]; then
                        if [ ! -e ""$SCHEDULED"/$PROJECT" ]; then
                            ln -sf "$PWD" "$SCHEDULED/$PROJECT";
                        fi
                        for m in "${DAYOFWEEK[@]}"
                        do
                          case $m in
                              mon|tue|wed|thu|fri)
                                tag -a "scheduled,weekday,$m" "$PROJECTS/$PROJECT"
                                ;;
                              sat|sun)
                                tag -a "scheduled,weekend,$m" "$PROJECTS/$PROJECT"
                                ;;
                              *)
                                __printerr "==> Error: Bad day: $m"
                                __print
                                return 1
                                ;;
                          esac
                        done
                        __remove_from_Someday
                        __remove_from_LogBook
                    fi
                    ;;

                stop)
                    shift
                    if [ $# -eq 0 ]; then
                        PROJECT=`basename "$PWD"`
                    elif [ $# -eq 1 ]; then
                        PROJECT=$1
                    else
                        __printerr "==> Error: Bad number of arguments."
                        __print
                        return 1
                    fi
                    PROJECTDIR=`find "$PROJECTS" -maxdepth 1 -name $PROJECT`
                    if [ -n "$PROJECTDIR" ]; then
                        __remove_from_Scheduled
                        __remove_from_Today
                    fi
                    ;;

                startall)
                    pushd . &>/dev/null
                    cd "$PROJECTS"
                    tag -m scheduled > $PROJECTS/PROJECTS-SCHEDULED.txt
                    while read line; do
                        ln -sf "$PROJECTS/$line" "$SCHEDULED/$line"
                    done < $PROJECTS/PROJECTS-SCHEDULED.txt
                    rm -f $PROJECTS/PROJECTS-SCHEDULED.txt
                    popd &>/dev/null
                    #open -g "$SCHEDULED"
                    ;;

                stopall)
                    find "$SCHEDULED" -type l -delete
                    #open -g "$SCHEDULED"
                    ;;
                *)
                    cd "$SCHEDULED"
                    #open -g .
            esac
            ;;

        someday)
            shift
            case $1 in
                list)
                    tree -L 1 -Cd -l "$SOMEDAY"
                    #open -g "$SOMEDAY"
                    ;;

                start)
                    shift
                    if [ $# -eq 0 ]; then
                        PROJECT=`basename "$PWD"`
                    elif [ $# -eq 1 ]; then
                        PROJECT=$1
                    else
                        __printerr "==> Error: Bad number of arguments."
                        __print
                        return 1
                    fi
                    PROJECTDIR=`find "$PROJECTS" -maxdepth 1 -name $PROJECT`
                    if [ -n "$PROJECTDIR" ]; then
                        if [ ! -e "$SOMEDAY/$PROJECT" ]; then
                            ln -sf "$PROJECTS/$PROJECT" "$SOMEDAY/$PROJECT";
                            tag -a someday "$PROJECTS/$PROJECT"
                        fi
                        __remove_from_Scheduled
                        __remove_from_LogBook
                        __remove_from_Today
                    fi
                    #open -g "$SOMEDAY"
                    ;;

                stop)
                    shift
                    if [ $# -eq 0 ]; then
                        PROJECT=`basename "$PWD"`
                    elif [ $# -eq 1 ]; then
                        PROJECT=$1
                    else
                        __printerr "==> Error: Bad number of arguments."
                        __print
                        return 1
                    fi

                    PROJECTDIR=`find "$PROJECTS" -name $PROJECT`
                    if [ -n "$PROJECTDIR" ]; then
                      __remove_from_Someday
                    fi

                    #open -g "$SOMEDAY"
                    ;;
                *)
                    cd "$SOMEDAY"
                    #open -g .
            esac
            ;;

        git)
            shift
            case $1 in
                start)
                    git init  && \
                    hub create && \
                    git add . && \
                    git commit -am "first commit" && \
                    git push origin master && \
                    hub browse .
                    ;;

                stop)
                    shift
                    git add . && \
                    git commit -am "$*" && \
                    git push origin master && \
                    hub browse .
                    ;;

                *)  git status -s
                    ;;
            esac
            ;;

        cloud)
            shift
            case $1 in
                start)
                    if __is_Things "$CLOUD"; then
                        __print "=> THINGS already to CLOUD."
                        __print
                    else
                        __print "=> Configuring THINGS to CLOUD..."
                        __print
                        unlink $TODAY_LINK
                        unlink $PROJECTS_LINK
                        ln -sf "$CLOUD/Today" $TODAY_LINK
                        ln -sf "$CLOUD/Projects" $PROJECTS_LINK
                        unlink $THINGS
                        ln -sf "$CLOUD" $THINGS
                        __print "-- THINGS  :"
                        ls -l $THINGS
                        __print
                    fi
                    ;;
                stop)
                    if __is_Things $LOCAL; then
                        __print "=> THINGS already to LOCAL."
                        __print
                    else
                        __print "=> Configuring THINGS to LOCAL..."
                        __print
                        unlink $TODAY_LINK
                        unlink $PROJECTS_LINK
                        ln -sf "$LOCAL/Today" $TODAY_LINK
                        ln -sf "$LOCAL/Projects" $PROJECTS_LINK
                        unlink $THINGS
                        ln -sf "$LOCAL" $THINGS
                        __print "-- THINGS  :"
                        ls -l $THINGS
                        __print
                    fi
                    ;;
                copy)
                    PROJECT=`basename $PWD`
                    PROJECTDIR=`find $PROJECTS -maxdepth 1 -name $PROJECT`
                    if [ -n "$PROJECTDIR" ]; then
                        if [ ! -e "$CLOUD/Projects/$PROJECT" ]; then
                            rsync -avErL $PWD "$CLOUD/Projects"
                        fi
                    fi
                    #open -g "$CLOUD/Projects/"
                    ;;
                *)
                    __print "=> Listing TODAY configuration..."
                    __print
                    __print "-- THINGS  :"
                    if [ ! -L $THINGS ]; then
                      __print "THINGS do not exist."
                      __print
                    else
                      ls -l $THINGS
                      __print
                    fi
                    ;;
            esac
            ;;

        *)
            if [ ! -L "$THINGS" ]; then
                ln -sf "$LOCAL" $THINGS
                ln -sf "$LOCAL/Today" $TODAY_LINK
                ln -sf "$LOCAL/Projects" $PROJECTS_LINK
            fi
            cd "$THINGS"
            #open -g .
            ;;
    esac
}
